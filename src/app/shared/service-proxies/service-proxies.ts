/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.1.0 (NJsonSchema v10.1.21.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class CommonLookupServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44302";
    }

    getAllSkills(): Observable<IHandleErrorOfListOfSkill> {
        let url_ = this.baseUrl + "/api/CommonLookup/GetAllSkills";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllSkills(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllSkills(<any>response_);
                } catch (e) {
                    return <Observable<IHandleErrorOfListOfSkill>><any>_observableThrow(e);
                }
            } else
                return <Observable<IHandleErrorOfListOfSkill>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllSkills(response: HttpResponseBase): Observable<IHandleErrorOfListOfSkill> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IHandleErrorOfListOfSkill.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IHandleErrorOfListOfSkill>(<any>null);
    }
}

@Injectable()
export class TokenServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44302";
    }

    get(user: Login): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Token/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44302";
    }

    getAllUser(): Observable<string> {
        let url_ = this.baseUrl + "/api/User/GetAllUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllUser(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllUser(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    userCrud(user: User): Observable<IHandleErrorOfUser> {
        let url_ = this.baseUrl + "/api/User/UserCrud";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUserCrud(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUserCrud(<any>response_);
                } catch (e) {
                    return <Observable<IHandleErrorOfUser>><any>_observableThrow(e);
                }
            } else
                return <Observable<IHandleErrorOfUser>><any>_observableThrow(response_);
        }));
    }

    protected processUserCrud(response: HttpResponseBase): Observable<IHandleErrorOfUser> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IHandleErrorOfUser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IHandleErrorOfUser>(<any>null);
    }

    crud(user: User): Observable<IHandleErrorOfUser> {
        let url_ = this.baseUrl + "/api/User/Crud";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCrud(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCrud(<any>response_);
                } catch (e) {
                    return <Observable<IHandleErrorOfUser>><any>_observableThrow(e);
                }
            } else
                return <Observable<IHandleErrorOfUser>><any>_observableThrow(response_);
        }));
    }

    protected processCrud(response: HttpResponseBase): Observable<IHandleErrorOfUser> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IHandleErrorOfUser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IHandleErrorOfUser>(<any>null);
    }
}

export abstract class IHandleErrorOfListOfSkill implements IIHandleErrorOfListOfSkill {
    errorMessage!: string | undefined;
    isError!: boolean;
    errorType!: ErrorTypes | undefined;
    entityId!: number | undefined;
    longTypeEntityId!: number | undefined;
    message_Info!: string | undefined;
    responseData!: Skill[] | undefined;
    listOfEntities!: Skill[][] | undefined;

    constructor(data?: IIHandleErrorOfListOfSkill) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.errorMessage = _data["errorMessage"];
            this.isError = _data["isError"];
            this.errorType = _data["errorType"];
            this.entityId = _data["entityId"];
            this.longTypeEntityId = _data["longTypeEntityId"];
            this.message_Info = _data["message_Info"];
            if (Array.isArray(_data["responseData"])) {
                this.responseData = [] as any;
                for (let item of _data["responseData"])
                    this.responseData!.push(Skill.fromJS(item));
            }
            if (Array.isArray(_data["listOfEntities"])) {
                this.listOfEntities = [] as any;
                for (let item of _data["listOfEntities"])
                    this.listOfEntities!.push(item);
            }
        }
    }

    static fromJS(data: any): IHandleErrorOfListOfSkill {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IHandleErrorOfListOfSkill' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorMessage"] = this.errorMessage;
        data["isError"] = this.isError;
        data["errorType"] = this.errorType;
        data["entityId"] = this.entityId;
        data["longTypeEntityId"] = this.longTypeEntityId;
        data["message_Info"] = this.message_Info;
        if (Array.isArray(this.responseData)) {
            data["responseData"] = [];
            for (let item of this.responseData)
                data["responseData"].push(item.toJSON());
        }
        if (Array.isArray(this.listOfEntities)) {
            data["listOfEntities"] = [];
            for (let item of this.listOfEntities)
                data["listOfEntities"].push(item);
        }
        return data; 
    }
}

export interface IIHandleErrorOfListOfSkill {
    errorMessage: string | undefined;
    isError: boolean;
    errorType: ErrorTypes | undefined;
    entityId: number | undefined;
    longTypeEntityId: number | undefined;
    message_Info: string | undefined;
    responseData: Skill[] | undefined;
    listOfEntities: Skill[][] | undefined;
}

export enum ErrorTypes {
    None = 0,
}

export abstract class DefaultFieldOfSkill implements IDefaultFieldOfSkill {
    handle!: IHandleErrorOfSkill | undefined;
    handlelst!: IHandleErrorOfListOfSkill | undefined;
    insByUserId!: number;
    insByUserName!: string | undefined;
    insOn!: moment.Moment;
    updOn!: moment.Moment;
    updByUserId!: number;
    updByUserName!: string | undefined;
    delOn!: moment.Moment;
    delByUserId!: number;
    delByUserName!: string | undefined;

    constructor(data?: IDefaultFieldOfSkill) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.handle = _data["handle"] ? IHandleErrorOfSkill.fromJS(_data["handle"]) : <any>undefined;
            this.handlelst = _data["handlelst"] ? IHandleErrorOfListOfSkill.fromJS(_data["handlelst"]) : <any>undefined;
            this.insByUserId = _data["insByUserId"];
            this.insByUserName = _data["insByUserName"];
            this.insOn = _data["insOn"] ? moment(_data["insOn"].toString()) : <any>undefined;
            this.updOn = _data["updOn"] ? moment(_data["updOn"].toString()) : <any>undefined;
            this.updByUserId = _data["updByUserId"];
            this.updByUserName = _data["updByUserName"];
            this.delOn = _data["delOn"] ? moment(_data["delOn"].toString()) : <any>undefined;
            this.delByUserId = _data["delByUserId"];
            this.delByUserName = _data["delByUserName"];
        }
    }

    static fromJS(data: any): DefaultFieldOfSkill {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'DefaultFieldOfSkill' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["handle"] = this.handle ? this.handle.toJSON() : <any>undefined;
        data["handlelst"] = this.handlelst ? this.handlelst.toJSON() : <any>undefined;
        data["insByUserId"] = this.insByUserId;
        data["insByUserName"] = this.insByUserName;
        data["insOn"] = this.insOn ? this.insOn.toISOString() : <any>undefined;
        data["updOn"] = this.updOn ? this.updOn.toISOString() : <any>undefined;
        data["updByUserId"] = this.updByUserId;
        data["updByUserName"] = this.updByUserName;
        data["delOn"] = this.delOn ? this.delOn.toISOString() : <any>undefined;
        data["delByUserId"] = this.delByUserId;
        data["delByUserName"] = this.delByUserName;
        return data; 
    }
}

export interface IDefaultFieldOfSkill {
    handle: IHandleErrorOfSkill | undefined;
    handlelst: IHandleErrorOfListOfSkill | undefined;
    insByUserId: number;
    insByUserName: string | undefined;
    insOn: moment.Moment;
    updOn: moment.Moment;
    updByUserId: number;
    updByUserName: string | undefined;
    delOn: moment.Moment;
    delByUserId: number;
    delByUserName: string | undefined;
}

export class Skill extends DefaultFieldOfSkill implements ISkill {
    name!: string | undefined;
    code!: number;
    props!: DomainProp[] | undefined;
    executeThis!: string | undefined;

    constructor(data?: ISkill) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            if (Array.isArray(_data["props"])) {
                this.props = [] as any;
                for (let item of _data["props"])
                    this.props!.push(DomainProp.fromJS(item));
            }
            this.executeThis = _data["executeThis"];
        }
    }

    static fromJS(data: any): Skill {
        data = typeof data === 'object' ? data : {};
        let result = new Skill();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        if (Array.isArray(this.props)) {
            data["props"] = [];
            for (let item of this.props)
                data["props"].push(item.toJSON());
        }
        data["executeThis"] = this.executeThis;
        super.toJSON(data);
        return data; 
    }
}

export interface ISkill extends IDefaultFieldOfSkill {
    name: string | undefined;
    code: number;
    props: DomainProp[] | undefined;
    executeThis: string | undefined;
}

export class DomainProp implements IDomainProp {
    propId!: number;
    prop!: string | undefined;
    propVal!: string | undefined;
    domainPropId!: number;

    constructor(data?: IDomainProp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propId = _data["propId"];
            this.prop = _data["prop"];
            this.propVal = _data["propVal"];
            this.domainPropId = _data["domainPropId"];
        }
    }

    static fromJS(data: any): DomainProp {
        data = typeof data === 'object' ? data : {};
        let result = new DomainProp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propId"] = this.propId;
        data["prop"] = this.prop;
        data["propVal"] = this.propVal;
        data["domainPropId"] = this.domainPropId;
        return data; 
    }
}

export interface IDomainProp {
    propId: number;
    prop: string | undefined;
    propVal: string | undefined;
    domainPropId: number;
}

export abstract class IHandleErrorOfSkill implements IIHandleErrorOfSkill {
    errorMessage!: string | undefined;
    isError!: boolean;
    errorType!: ErrorTypes | undefined;
    entityId!: number | undefined;
    longTypeEntityId!: number | undefined;
    message_Info!: string | undefined;
    responseData!: Skill | undefined;
    listOfEntities!: Skill[] | undefined;

    constructor(data?: IIHandleErrorOfSkill) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.errorMessage = _data["errorMessage"];
            this.isError = _data["isError"];
            this.errorType = _data["errorType"];
            this.entityId = _data["entityId"];
            this.longTypeEntityId = _data["longTypeEntityId"];
            this.message_Info = _data["message_Info"];
            this.responseData = _data["responseData"] ? Skill.fromJS(_data["responseData"]) : <any>undefined;
            if (Array.isArray(_data["listOfEntities"])) {
                this.listOfEntities = [] as any;
                for (let item of _data["listOfEntities"])
                    this.listOfEntities!.push(Skill.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IHandleErrorOfSkill {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IHandleErrorOfSkill' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorMessage"] = this.errorMessage;
        data["isError"] = this.isError;
        data["errorType"] = this.errorType;
        data["entityId"] = this.entityId;
        data["longTypeEntityId"] = this.longTypeEntityId;
        data["message_Info"] = this.message_Info;
        data["responseData"] = this.responseData ? this.responseData.toJSON() : <any>undefined;
        if (Array.isArray(this.listOfEntities)) {
            data["listOfEntities"] = [];
            for (let item of this.listOfEntities)
                data["listOfEntities"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IIHandleErrorOfSkill {
    errorMessage: string | undefined;
    isError: boolean;
    errorType: ErrorTypes | undefined;
    entityId: number | undefined;
    longTypeEntityId: number | undefined;
    message_Info: string | undefined;
    responseData: Skill | undefined;
    listOfEntities: Skill[] | undefined;
}

export class Login implements ILogin {
    userName!: string | undefined;
    password!: string | undefined;

    constructor(data?: ILogin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): Login {
        data = typeof data === 'object' ? data : {};
        let result = new Login();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILogin {
    userName: string | undefined;
    password: string | undefined;
}

export abstract class IHandleErrorOfUser implements IIHandleErrorOfUser {
    errorMessage!: string | undefined;
    isError!: boolean;
    errorType!: ErrorTypes | undefined;
    entityId!: number | undefined;
    longTypeEntityId!: number | undefined;
    message_Info!: string | undefined;
    responseData!: User | undefined;
    listOfEntities!: User[] | undefined;

    constructor(data?: IIHandleErrorOfUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.errorMessage = _data["errorMessage"];
            this.isError = _data["isError"];
            this.errorType = _data["errorType"];
            this.entityId = _data["entityId"];
            this.longTypeEntityId = _data["longTypeEntityId"];
            this.message_Info = _data["message_Info"];
            this.responseData = _data["responseData"] ? User.fromJS(_data["responseData"]) : <any>undefined;
            if (Array.isArray(_data["listOfEntities"])) {
                this.listOfEntities = [] as any;
                for (let item of _data["listOfEntities"])
                    this.listOfEntities!.push(User.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IHandleErrorOfUser {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IHandleErrorOfUser' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorMessage"] = this.errorMessage;
        data["isError"] = this.isError;
        data["errorType"] = this.errorType;
        data["entityId"] = this.entityId;
        data["longTypeEntityId"] = this.longTypeEntityId;
        data["message_Info"] = this.message_Info;
        data["responseData"] = this.responseData ? this.responseData.toJSON() : <any>undefined;
        if (Array.isArray(this.listOfEntities)) {
            data["listOfEntities"] = [];
            for (let item of this.listOfEntities)
                data["listOfEntities"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IIHandleErrorOfUser {
    errorMessage: string | undefined;
    isError: boolean;
    errorType: ErrorTypes | undefined;
    entityId: number | undefined;
    longTypeEntityId: number | undefined;
    message_Info: string | undefined;
    responseData: User | undefined;
    listOfEntities: User[] | undefined;
}

export abstract class DefaultFieldOfUser implements IDefaultFieldOfUser {
    handle!: IHandleErrorOfUser | undefined;
    handlelst!: IHandleErrorOfListOfUser | undefined;
    insByUserId!: number;
    insByUserName!: string | undefined;
    insOn!: moment.Moment;
    updOn!: moment.Moment;
    updByUserId!: number;
    updByUserName!: string | undefined;
    delOn!: moment.Moment;
    delByUserId!: number;
    delByUserName!: string | undefined;

    constructor(data?: IDefaultFieldOfUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.handle = _data["handle"] ? IHandleErrorOfUser.fromJS(_data["handle"]) : <any>undefined;
            this.handlelst = _data["handlelst"] ? IHandleErrorOfListOfUser.fromJS(_data["handlelst"]) : <any>undefined;
            this.insByUserId = _data["insByUserId"];
            this.insByUserName = _data["insByUserName"];
            this.insOn = _data["insOn"] ? moment(_data["insOn"].toString()) : <any>undefined;
            this.updOn = _data["updOn"] ? moment(_data["updOn"].toString()) : <any>undefined;
            this.updByUserId = _data["updByUserId"];
            this.updByUserName = _data["updByUserName"];
            this.delOn = _data["delOn"] ? moment(_data["delOn"].toString()) : <any>undefined;
            this.delByUserId = _data["delByUserId"];
            this.delByUserName = _data["delByUserName"];
        }
    }

    static fromJS(data: any): DefaultFieldOfUser {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'DefaultFieldOfUser' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["handle"] = this.handle ? this.handle.toJSON() : <any>undefined;
        data["handlelst"] = this.handlelst ? this.handlelst.toJSON() : <any>undefined;
        data["insByUserId"] = this.insByUserId;
        data["insByUserName"] = this.insByUserName;
        data["insOn"] = this.insOn ? this.insOn.toISOString() : <any>undefined;
        data["updOn"] = this.updOn ? this.updOn.toISOString() : <any>undefined;
        data["updByUserId"] = this.updByUserId;
        data["updByUserName"] = this.updByUserName;
        data["delOn"] = this.delOn ? this.delOn.toISOString() : <any>undefined;
        data["delByUserId"] = this.delByUserId;
        data["delByUserName"] = this.delByUserName;
        return data; 
    }
}

export interface IDefaultFieldOfUser {
    handle: IHandleErrorOfUser | undefined;
    handlelst: IHandleErrorOfListOfUser | undefined;
    insByUserId: number;
    insByUserName: string | undefined;
    insOn: moment.Moment;
    updOn: moment.Moment;
    updByUserId: number;
    updByUserName: string | undefined;
    delOn: moment.Moment;
    delByUserId: number;
    delByUserName: string | undefined;
}

export class User extends DefaultFieldOfUser implements IUser {
    userName!: string | undefined;
    password!: string | undefined;
    emailAddress!: string | undefined;
    props!: DomainProp[] | undefined;
    executeThis!: string | undefined;

    constructor(data?: IUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.emailAddress = _data["emailAddress"];
            if (Array.isArray(_data["props"])) {
                this.props = [] as any;
                for (let item of _data["props"])
                    this.props!.push(DomainProp.fromJS(item));
            }
            this.executeThis = _data["executeThis"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["emailAddress"] = this.emailAddress;
        if (Array.isArray(this.props)) {
            data["props"] = [];
            for (let item of this.props)
                data["props"].push(item.toJSON());
        }
        data["executeThis"] = this.executeThis;
        super.toJSON(data);
        return data; 
    }
}

export interface IUser extends IDefaultFieldOfUser {
    userName: string | undefined;
    password: string | undefined;
    emailAddress: string | undefined;
    props: DomainProp[] | undefined;
    executeThis: string | undefined;
}

export abstract class IHandleErrorOfListOfUser implements IIHandleErrorOfListOfUser {
    errorMessage!: string | undefined;
    isError!: boolean;
    errorType!: ErrorTypes | undefined;
    entityId!: number | undefined;
    longTypeEntityId!: number | undefined;
    message_Info!: string | undefined;
    responseData!: User[] | undefined;
    listOfEntities!: User[][] | undefined;

    constructor(data?: IIHandleErrorOfListOfUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.errorMessage = _data["errorMessage"];
            this.isError = _data["isError"];
            this.errorType = _data["errorType"];
            this.entityId = _data["entityId"];
            this.longTypeEntityId = _data["longTypeEntityId"];
            this.message_Info = _data["message_Info"];
            if (Array.isArray(_data["responseData"])) {
                this.responseData = [] as any;
                for (let item of _data["responseData"])
                    this.responseData!.push(User.fromJS(item));
            }
            if (Array.isArray(_data["listOfEntities"])) {
                this.listOfEntities = [] as any;
                for (let item of _data["listOfEntities"])
                    this.listOfEntities!.push(item);
            }
        }
    }

    static fromJS(data: any): IHandleErrorOfListOfUser {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IHandleErrorOfListOfUser' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorMessage"] = this.errorMessage;
        data["isError"] = this.isError;
        data["errorType"] = this.errorType;
        data["entityId"] = this.entityId;
        data["longTypeEntityId"] = this.longTypeEntityId;
        data["message_Info"] = this.message_Info;
        if (Array.isArray(this.responseData)) {
            data["responseData"] = [];
            for (let item of this.responseData)
                data["responseData"].push(item.toJSON());
        }
        if (Array.isArray(this.listOfEntities)) {
            data["listOfEntities"] = [];
            for (let item of this.listOfEntities)
                data["listOfEntities"].push(item);
        }
        return data; 
    }
}

export interface IIHandleErrorOfListOfUser {
    errorMessage: string | undefined;
    isError: boolean;
    errorType: ErrorTypes | undefined;
    entityId: number | undefined;
    longTypeEntityId: number | undefined;
    message_Info: string | undefined;
    responseData: User[] | undefined;
    listOfEntities: User[][] | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}